{"version":3,"sources":["services/products.js","components/listing.js","App.js","index.js"],"names":["instance","axios","create","defaults","timeout","get","then","response","data","Listing","product","name","type","color","price","manufacturer","availability","App","useState","productType","setProductType","products","setProducts","loadList","productService","length","err","console","log","onClick","map","id","ReactDOM","render","document","getElementById"],"mappings":"uMAEMA,E,OAAWC,EAAMC,SACvBF,EAASG,SAASC,QAAU,MAG5B,IAee,EAfG,WAEd,OADgBJ,EAASK,IAAT,oBACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa9B,EAVM,WAEjB,OADgBR,EAASK,IAAT,uBACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ9B,EALI,WAEf,OADgBR,EAASK,IAAT,qBACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,S,OCF9BC,EAdC,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAEf,OACI,+BACI,6BAAKA,EAAQC,OACb,6BAAKD,EAAQE,OACb,6BAAKF,EAAQG,QACb,6BAAKH,EAAQI,QACb,6BAAKJ,EAAQK,eACb,6BAAKL,EAAQM,mBCgHVC,EAtHH,WAAM,MAGsBC,mBAAS,MAH/B,mBAGTC,EAHS,KAGIC,EAHJ,OAMgBF,mBAAS,MANzB,mBAMTG,EANS,KAMCC,EAND,KAWVC,EAAW,SAACJ,GAIhB,GAFAG,EAAY,MAEQ,WAAhBH,EACF,IACEC,EAAe,UACfI,IAEGlB,MAAK,SAAAC,GACoB,IAApBA,EAASkB,QACXH,EAAYf,MAIpB,MAAOmB,GACLC,QAAQC,IAAIF,GAIhB,GAAoB,cAAhBP,EACF,IACEC,EAAe,aACfI,IAEGlB,MAAK,SAAAC,GACoB,IAApBA,EAASkB,QACXH,EAAYf,MAIpB,MAAOmB,GACLC,QAAQC,IAAIF,GAIhB,GAAoB,YAAhBP,EACF,IACEC,EAAe,WACfI,IAEGlB,MAAK,SAAAC,GACoB,IAApBA,EAASkB,QACXH,EAAYf,MAIpB,MAAOmB,GACLC,QAAQC,IAAIF,KA6ClB,OACE,gCACE,wBAAQG,QAAS,kBAAMN,EAAS,WAAhC,yBACA,wBAAQM,QAAS,kBAAMN,EAAS,cAAhC,4BACA,wBAAQM,QAAS,kBAAMN,EAAS,YAAhC,0BAEc,OAAbF,EA5CiB,OAAhBF,EAEA,kFAKA,oDAAuBA,EAAvB,kBAQF,gCACE,0CAAaA,KACb,gCACE,kCACE,+BACE,sCACA,sCACA,uCACA,uCACA,8CACA,iDAEDE,EAASS,KAAI,SAAApB,GAAO,OACnB,cAAC,EAAD,CAA0BA,QAASA,GAArBA,EAAQqB,mBC9FpCC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.0e9f96a2.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create()\r\ninstance.defaults.timeout = 99999\r\n//const baseUrl = 'http://localhost:3001'\r\n\r\nconst getGloves = () => {\r\n    const request = instance.get(`/products/gloves`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst getFacemasks = () => {\r\n    const request = instance.get(`/products/facemasks`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst getBeanies = () => {\r\n    const request = instance.get(`/products/beanies`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { getGloves, getFacemasks, getBeanies }","import React from 'react'\r\n\r\nconst Listing = ({ product }) => {\r\n\r\n    return (\r\n        <tr>\r\n            <td>{product.name}</td>\r\n            <td>{product.type}</td>\r\n            <td>{product.color}</td>\r\n            <td>{product.price}</td>\r\n            <td>{product.manufacturer}</td>\r\n            <td>{product.availability}</td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default Listing","import React, { useState } from 'react'\nimport productService from './services/products'\nimport Listing from './components/listing'\n\n\nconst App = () => {\n\n  //holds in currently requested/rendered type of products\n  const [productType, setProductType] = useState(null)\n\n  //holds in rendered list of products\n  const [products, setProducts] = useState(null)\n\n\n  //loads list of products\n  //hardcoded because time is running out\n  const loadList = (productType) => {\n\n    setProducts(null)\n\n    if (productType === 'gloves') {\n      try {\n        setProductType('gloves')\n        productService\n          .getGloves()\n          .then(response => {\n            if (response.length !== 0) {\n              setProducts(response)\n            }\n          })\n      }\n      catch (err) {\n        console.log(err)\n      }\n    }\n\n    if (productType === 'facemasks') {\n      try {\n        setProductType('facemasks')\n        productService\n          .getFacemasks()\n          .then(response => {\n            if (response.length !== 0) {\n              setProducts(response)\n            }\n          })\n      }\n      catch (err) {\n        console.log(err)\n      }\n    }\n\n    if (productType === 'beanies') {\n      try {\n        setProductType('beanies')\n        productService\n          .getBeanies()\n          .then(response => {\n            if (response.length !== 0) {\n              setProducts(response)\n            }\n          })\n      }\n      catch (err) {\n        console.log(err)\n      }\n    }\n  }\n\n  //takes care of rendering a correct text on the screen based on the situation\n  const loadingScreen = () => {\n    if (productType === null) {\n      return (\n        <h1>Please select the type of items you want to list</h1>\n      )\n    }\n    else {\n      return (\n        <h1>Loading a list of {productType}... Hang on!</h1>\n      )\n    }\n  }\n\n  //renders the table when products are loaded\n  const productScreen = () => {\n    return (\n      <div>\n        <h1>List of {productType}</h1>\n        <table>\n          <tbody>\n            <tr>\n              <th>Name</th>\n              <th>Type</th>\n              <th>Color</th>\n              <th>Price</th>\n              <th>Manufacturer</th>\n              <th>Availability</th>\n            </tr>\n            {products.map(product =>\n              <Listing key={product.id} product={product} />\n            )}\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n\n\n  //renders buttons on the top of the screen to take care launching a function to load product data\n  return (\n    <div>\n      <button onClick={() => loadList('gloves')} >List gloves</button>\n      <button onClick={() => loadList('facemasks')}>List facemasks</button>\n      <button onClick={() => loadList('beanies')}>List beanies</button>\n      {/* This determines whether products data has been loaded */}\n      {products === null ?\n        loadingScreen() :\n        productScreen()\n      }\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}